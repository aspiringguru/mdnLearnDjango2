https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Tutorial_local_library_website

cd /mnt/g/2020_working/coding/mdn_learnDjango2

conda deactivate
deactivate
python3 -m venv venv
source venv/bin/activate


pip install python-dotenv
pip install yolk3k
#yolk -V django

pip install django==2.2.9

# run from git bash for windows as username and password set here
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/aspiringguru/mdnLearnDjango2.git
git push -u origin master


python -m django --version
which django-admin
django-admin --version


#-------------------------------------------------------------------------------
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/skeleton_website
Django Tutorial Part 2: Creating a skeleton website


django-admin startproject locallibrary
cd locallibrary

python3 manage.py startapp catalog

python3 manage.py makemigrations
python3 manage.py migrate

python3 manage.py runserver


netstat -lntu

#default port is 8000
python manage.py runserver 8080
#local connection to server only

python manage.py runserver 0:8000
#allows connection to server from anywhere


https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Models

#-------------------------------------------------------------------------------
python3 manage.py createsuperuser
#--------------------------------------------------------------------
Username (leave blank to use 'bmt'): admin
Email address: bmatthewtaylor@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.
#--------------------------------------------------------------------

admin
123456
#--------------------------------------------------------------------
python3 manage.py runserver


https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Home_page
Django Tutorial Part 5: Creating our home page


http://localhost:8000/catalog/

https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Generic_views
Django Tutorial Part 6: Generic list and detail views

https://github.com/aspiringguru/mdnLearnDjango2
#windows git bash
cd /g/2020_working/coding/mdn_learnDjango2

http://localhost:8000/admin/catalog/book/
http://localhost:8000/catalog/
https://github.com/mdn/django-locallibrary-tutorial/blob/master/catalog/views.py


#should work.
sudo mount -t drvfs G: /mnt/g


cd /mnt/g/2020_working/coding/mdn_learnDjango2
conda deactivate
deactivate
source venv/bin/activate
cd locallibrary/
python3 manage.py runserver

http://localhost:8000/admin/catalog/book/
http://localhost:8000/catalog/


adding django configuration to make this url work.
http://localhost:8000/catalog/books/

edit /catalog/urls.py
add
path('books/', views.BookListView.as_view(), name='books'),
to
urlpatterns

#edit catalog/views.py
#add
class BookListView(generic.ListView):
    model = Book

http://localhost:8000/catalog/books/
#browser will now give TemplateDoesNotExist at /catalog/books/
#bash shell where server is running returns
django.template.exceptions.TemplateDoesNotExist: catalog/book_list.html


#edit catalog/views.py
#add this
class BookListView(generic.ListView):
    model = Book
    context_object_name = 'my_book_list'   # your own name for the list as a template variable
    queryset = Book.objects.filter(title__icontains='war')[:5] # Get 5 books containing the title war
    template_name = 'books/my_arbitrary_template_name_list.html'  # Specify your own template name/location


#browser now reqturns
TemplateDoesNotExist at /catalog/books/
books/my_arbitrary_template_name_list.html, catalog/book_list.html
#bash shell returns
django.template.exceptions.TemplateDoesNotExist: books/my_arbitrary_template_name_list.html, catalog/book_list.html


edit /locallibrary/catalog/templates/catalog/book_list.html

#this now works with no visible error in browser or bash shell.
http://localhost:8000/catalog/books/

change
queryset = Book.objects.filter(title__icontains='war')[:5]
to contain a word used in book titles.
queryset = Book.objects.filter(title__icontains='yellow')[:5]
